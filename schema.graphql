type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  block: BigInt!
  timestamp: BigInt!
  hash: Bytes!
}

type PermanentURI @entity(immutable: true) {
  id: Bytes!
  value: String! # string
  tokenId: BigInt! # uint256
  block: BigInt!
  timestamp: BigInt!
  hash: Bytes!
}

type TransferBatch @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  tokenIds: [BigInt!]! # uint256[]
  values: [BigInt!]! # uint256[]
  block: BigInt!
  timestamp: BigInt!
  hash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  value: BigInt! # uint256
  block: BigInt!
  timestamp: BigInt!
  hash: Bytes!
}

type Token @entity {
  id: ID!
  editions: BigInt!
  creator: Bytes!
  metaDataUri: String # string
  tokenMetaData: TokenMetaData
  timestamp: BigInt!
  block: BigInt!
  hash: Bytes!
}

type URI @entity {
  id: Bytes!
	from: Bytes!
  tokenId: BigInt! # uint256
  metaDataUri: String # string
  tokenMetaData: TokenMetaData
  block: BigInt!
  timestamp: BigInt!
  hash: Bytes!
}

type Holder @entity {
  id: ID!
  address: Bytes!
  tokenId: BigInt!
  amount: BigInt!
  timestamp: BigInt!
}

type TokenMetaData @entity {
  id: ID!
  name: String
  description: String
  image: String
  animation_url: String
  mimeType: String!
}

type UidMetaData @entity {
  id: ID!
  description: String
  image: String
}

type swap @entity(immutable: true) {
  id: Bytes!
  erc1155: Bytes! # address
  amount: BigInt! # uint256
  issuer: Bytes!
  value: BigInt! # uint256
  tokenId: BigInt! # uint256
  op: BigInt! # uint256
  swapId: BigInt! # uint256
  block: BigInt!
  timestamp: BigInt!
  hash: Bytes!
}
type ungrundId @entity {
  id: Bytes!
  metaDataUri: String! # string
  uidMetaData: UidMetaData
  ungrundId: String! # string
  block: BigInt!
  timestamp: BigInt!
  hash: Bytes!
}
